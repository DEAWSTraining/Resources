AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Virtial Private Cloud (VPC).  The template uses parameters so that you can set the CIDR addresses for the subnets.

# First we collect from parameters from the user:
Parameters:
  vpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Enter a valid CIDR for the VPC

  subnetPublicCidr1:
    Type: String
    Default: 10.0.0.0/24
    Description: Enter a valid CIDR for the first public subnet

  subnetPublicCidr2:
    Type: String
    Default: 10.0.1.0/24
    Description: Enter a valid CIDR for the second public subnet 
  
  subnetPrivateCidr1:
    Type: String
    Default: 10.0.4.0/24
    Description: Enter a valid CIDR for the first private subnet

  subnetPrivateCidr2:
    Type: String
    Default: 10.0.5.0/24
    Description: Enter a valid CIDR for the second public subnet

# This is the resources section, where we describe what we want to build:
Resources:

  # This is the actuall VPC:
  virtualPrivateCloud:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref vpcCidr
      Tags: 
        - 
          Key: Name
          Value: demo-vpc

  # Then we define each of the subnets
  # Notice how we refer to the VPC using the !Ref function

  # The Public Subnets:
  subnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
            Fn::Select: 
              - 0
              - Fn::GetAZs: ""
      CidrBlock: !Ref subnetPublicCidr1
      MapPublicIpOnLaunch: true
      VpcId: !Ref virtualPrivateCloud
      Tags: 
        - 
          Key: Name
          Value: subnet-public-1

  subnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
            Fn::Select: 
              - 1
              - Fn::GetAZs: ""
      CidrBlock: !Ref subnetPublicCidr2
      MapPublicIpOnLaunch: true
      VpcId: !Ref virtualPrivateCloud
      Tags: 
        - 
          Key: Name
          Value: subnet-public-2

  # The Public Subnets:
  subnetPrivate1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
            Fn::Select: 
              - 0
              - Fn::GetAZs: ""
      CidrBlock: !Ref subnetPrivateCidr1
      MapPublicIpOnLaunch: false
      VpcId: !Ref virtualPrivateCloud
      Tags: 
        - 
          Key: Name
          Value: subnet-private-1

  subnetPrivate2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
            Fn::Select: 
              - 1
              - Fn::GetAZs: ""
      CidrBlock: !Ref subnetPrivateCidr2
      MapPublicIpOnLaunch: false
      VpcId: !Ref virtualPrivateCloud
      Tags: 
        - 
          Key: Name
          Value: subnet-private-2

  # So that resources inside the VPC can connect to the Internet, we create an 
  # Interget Gateway...
  internetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
        - 
          Key: Name
          Value: demo-igw

  # ...and attach it to the VPC.
  internetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref virtualPrivateCloud
  
  # Now we need to create a route to the Internet Gateway

  # First we creat a route table and attach it to the VPC:
  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - 
          Key: Name
          Value: public-route-table
      VpcId: !Ref virtualPrivateCloud

  # Then  we create a route within the route table pointing to the IGW
  # Notice the DependsOn 'command'.  Sometimes you need to tell CloudFormation what 
  # order to build resources.
  publicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: publicRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  # And we attach the route table to the public subnets, this will replace the 
  # default route table for these subnets:
  publicRouteAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetPublic1
  
  publicRouteAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetPublic2
  