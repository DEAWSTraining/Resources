- Log into the AWS console
- Set the region to Sydney (stay in this region today, check from time to time)
- Navigate to VPC

- We need to create an Elastic IP address for our NAT gateway
- From the menu on the left hand side, select "Elastic IPs"
- Select "Allocate new address"
- Select "Allocate"

- Return to the "VPC Dashboard"
- Select "Start VPC Wizard"

- In "Step 1: Select a VPC Configuration":
- From the options on the left hand side select "VPC with Public and Private Subnets"
- Select "Select"

- In "Step 2: VPC with Public and Private Subnets":
- Enter a VPC name "my-test-vpc"
- See that the wizard has entered names and CIDR ranges for your subnets
- In "Elastic IP Allocation ID" click into the text box, and select the Elastic IP that you created earlier.
- All the other default settings are fine
- Select "Create VPC"

- The wizard will work (this may take a few minutes), and then display "VPC Successfully Created" 
- Select "OK"

- You will now be taken to the VPC list for your account.
- Take a look at the VPC you created.
- Notice that this is not the only VPC in your account.  You should also see an (unnamed) 'default' VPC.

- We have now created a VPC with two subnets, one is public (in that it can routed to from the Internet) and one subnet is private.

- Now let's create a couple of EC2 Instances to test with.

- First we will create an EC2 instance in the public subnet.

- Navigate to CloudFormation
- Select "Create Stack"
- Select "Upload a template to Amazon S3" and "Browse"...
- In the resources provided for this workshop, in the folder "Session 3" select the template: "ec2-instance-for-subnet.yaml"
- This template has been created to prompt you for parameters before the stack is built.
- Select "Next"

- Enter a name for the stack "my-public-instance-stack" (this is not the name that will be given to the instance)
- The Key parameter is now a dropdown box.  Select a key that you have on your machine.
- Enter a server name "my-demo-server-public"
- In the subnet dropdown menu you will have a few options.  Select the subnet that has "(Public subnet)"
- Note that we set the name "Public subnet" when we created the subnet in the VPC wizard.
- Select "Next"

- Leave all the settings on the next screen.
- Scroll to the bottom and select "Next"

- Scroll to the bottom of the Review page and select "Create"

- We won't wait for this stack to create, let's create another EC2 Instance in the private subnet.

- Select "Create Stack" and follow the same process, but this time:
- Enter a name for the stack "my-private-instance-stack"
- Enter a server name "my-demo-server-private"
- Select the subnet with "(Private subnet)"

- By now, our public EC2 Instance may have built.  Let's connect into the server.

- Navigate to EC2
- Select "Instances" on the left hand side.
- By now, you should see two EC2 instances, if you need to expand the Name column.

- Connect with RDP into the public server:
- Select the public instance, "Actions" and "Get Windows Password"
- Password not available yet?  Hold on a minute, and try again.

- Try to connect to the public instance via your RDP client...
- Its not working!!
- In our VPC we have Security Groups that control the traffic that can reach our Instances.
- Both of our instances are in the 'default' security group.
- Let's create a rule in the default security group to allow access to our Instances via RDP.

- From the EC2 select either of the instances, look at the details section in the lower half of the screen.
- In the "Description" tab, find the "Security groups" and click on "default"

- On the following screen in the lower half, you will see the details of the security group.
- Select the "Inbound" tab.
- Notice that currently, "All traffic" is allowed inbound to our instances, but the source is this (the same) security group.
- This means that the instances can RDP to each other, but we can't RDP from outside the network.
- Select "Edit", then "Add Rule"
- On the new rule, for Type select "RDP", and for Source select "My IP"
- By selecting "My IP" we restrict RDP access from the outside world to only machines using your Internet connection.

- Now, try again to RDP to your public instance.
- Yay, it works.

- OK, minimise the RDP session to the public instance.  Let's see if we can RDP to the private instance:
- Of course, it doesn't work.  That's because, even though the instance has been allocated a public IP address, its not 'visible' the the Internet through the VPC.

- But we can still get there:

- From the EC2 Instance list, select the private server, and in the details in the bottom half of the screen find "Private IPs".  
- Make a note of this address.
- Also take a moment to discover the password for this server.

- Go back to the RDP session with your 'public' instance.  
- From the 'Start' menu select "Remote Desktop Connection"
- Enter in to the "Computer" field the Private IP address of the private server that you noted down just before.
- Select "Connect"
- In the credentials box, enter the User name "Administrator" and the password for the private server.

- Yay, it works.

- You have created a private server, in a private network, that is accessible via what we call a bastion host.

- Once your done experimenting with this environment its time to clean up.

- Navigate back to CloudFormation
- Delete the stacks in turn by selecting the stack, and selecting "Actions", "Delete Stack", then "Yes, Delete"

- Make sure the stacks are fully deleted before continuing.

- Navigate back to VPC and then select "Your VPC's" from the menu on the left.
- Delete the VPC by selecting the stack, and selecting "Actions", "Delete VPC", then "Yes, Delete"
- One last thing, select "Elastic IPs" from the menu on the left.
- Select the Elastic IP entry, and select "Actions", "Release addresses", then "Release"
